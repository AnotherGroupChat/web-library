//
// Editable
// --------------------------------------------------

%editable-spin {
	// Use scale() for better rendering quality
	@keyframes editable-spin {
		0% {
			transform: scale(0.75) rotate(0);
		}

		100% {
			transform: scale(0.75) rotate(360deg);
		}
	}

	right: 0;
	top: 0;
	width: auto;
	height: 100%;
	animation: editable-spin 1s linear infinite;

	path {
		stroke-width: 1.33px; // Results in 1px
	}
}

.editable {
	flex: 1 1 auto;
	min-width: 0; // Fix truncation

	@include mouse-and-bp-up(md) {
		line-height: normal;
	}

	.editable-content {
		white-space: pre-wrap;
		padding: $editable-padding;
		border: $input-border-width solid transparent;
		width: calc(100% + #{2 * $editable-border-width});
		margin: -$editable-border-width;
		border-radius: $editable-border-radius;
		cursor: pointer;

		@include state(".editable:hover") {
			background-color: $editable-hover-bg; // Use transparency so you can see through the comma between last and first name
		}

		@include state(".empty .editable") {
			&:before {
				content: "\00a0";
			}
		}
	}

	.editable-control {
		flex: 1 1 auto;
		font: inherit;
		line-height: normal;
		text-align: inherit;
		margin: -($editable-border-width + $editable-padding);
		width: calc(
			100% + #{2 * ($editable-border-width + $editable-padding)}
		);
		padding: $editable-padding;
		border: $editable-border-width solid $editable-border-color;
		color: $editable-color;
		background: $editable-bg;
		border-radius: $editable-border-radius;
		background-clip: padding-box;

		&:focus {
			outline: none;
		}

		@include state(".busy .editable-control") {
			padding-right: $space-sm + $space-xs;
		}
	}

	&:not(.textarea) {
		.editable-content {
			@include text-truncate;
		}
	}

	.icon-spin {
		@extend %editable-spin;
	}

	// Textarea
	&.textarea {
		// Same height for textarea editable-content hover state like other editables
		// No padding for visual 2px padding between border and text selection in editable-control
		.editable-content,
		.editable-control {
			line-height: $line-height-base;
			padding-top: 0;
			padding-bottom: 0;
		}

		// Compensate border
		.editable-content {
			margin-top: -1px;
			margin-bottom: -1px;
		}

		// Compensate border
		.editable-control {
			margin-top: -$editable-border-width;
			margin-bottom: -$editable-border-width;
		}
	}
}

.pseudo-editable {
	@include touch-or-bp-down(sm) {
		flex: 1 1 auto;
		border: none;
		padding: 0;
		background-color: transparent;
	}

	@include mouse-and-bp-up(md) {
		line-height: normal;

		.Select-control {
			padding: $editable-padding;
			border: $input-border-width solid transparent;
			width: calc(100% + #{2 * $editable-border-width});
			margin: -$editable-border-width;
			background-color: transparent;
			cursor: pointer;
			transition: none;
		}

		&:hover {
			.Select-control {
				background-color: $editable-hover-bg;
				border-color: $editable-hover-bg;
			}
		}

		.Select-value {
			padding: 0 $editable-padding;
		}

		&.Select--single {
			&.has-value {
				.Select-value {
					padding-right: $space-md;

					@include state(".busy .pseudo-editable") {
						padding-right: $space-xl;
					}
				}
			}
		}

		.Select-arrow {
			display: none;
			margin-right: 2px; // Tweak optical arrow position
		}

		&.is-focused {
			.Select-control {
				border-color: $input-focus-color;
				background-color: $input-bg;
				border-radius: 1px;
			}

			.Select-arrow {
				display: block;
			}
		}

		.Select-menu-outer {
			left: -$editable-padding;
			top: calc(100% + #{$space-min + $input-border-width + $editable-padding + $input-border-width});
			right: -$editable-padding;
		}
	}

	& + .icon-spin {
		@extend %editable-spin;
		right: $space-md - 1px;
	}
}

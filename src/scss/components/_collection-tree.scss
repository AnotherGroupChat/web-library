//
// Collection tree
// --------------------------------------------------

.collection-tree {
	height: 100%;

	@include mouse-and-bp-up(md) {
		height: calc(100% - 160px); // temporary solution to stop collection tree and tag selector
					 				// from overlapping
	}

	@include touch-or-bp-down(sm) {
		display: flex;
		flex-direction: column;
	}

	@include mouse-and-bp-up(md) {
		padding: $collection-tree-padding-y 0;
		overflow: auto;
	}

	section {
		& + section {
			@include touch-or-bp-down(sm) {
				border-top: $space-min solid $touch-collection-tree-separator;
			}
		}
	}

	h4 {
		color: $collection-tree-headings-color;
		margin: 0;
		padding: 0 $collection-tree-padding-x 0 $collection-tree-padding-left;

		@include touch-or-bp-down(sm) {
			padding: 0 $collection-tree-padding-x-touch;
		}
	}

	.item-container {
		outline: none;
		display: flex;
		align-items: center;
		cursor: pointer;
		position: relative;

		@include touch-or-bp-down(sm) {
			padding: 1px $default-padding-x-touch 0;

			&::before {
				content: "";
				position: absolute;
				height: 1px;
				top: 0;
				left: 2 * $default-padding-x-touch + 28px;
				right: 0;
				background: $touch-collection-tree-border;
			}
		}

		@include mouse-and-bp-up(md) {
			padding-right: $default-padding-x;
		}

		@include variant("li:first-child > .item-container") {
			@include touch-or-bp-down(sm) {
	 			padding-top: 0;

	 			&::before {
	 				content: none;
	 			}
	 		}
		}

		@include state("li.selected > .item-container") {
			@include touch-or-bp-down(sm) {
				background: $touch-collection-tree-active-link-bg;

				&::before {
					content: none;
				}
			}

			@include mouse-and-bp-up(md) {
				background: $collection-tree-active-link-bg;
			}
		}

		// Revisit: dnd styling
		@include state(".item-container.dnd-target", "li.selected .item-container.dnd-target") {
			@include mouse-and-bp-up(md) {
				background: $collection-tree-dnd-target-bg-color;
			}
		}

		.twisty {
			margin-left: -$collection-tree-padding-left;

			@include touch-or-bp-down(sm) {
				display: none;
			}

			.icon-triangle {
				@include state(".open > .item-container") {
					transform: scaleY(-1);
				}
			}
		}

		.icon {
			@include touch-or-bp-down(sm) {
				@include state("li.selected > .item-container") {
					color: $touch-collection-tree-active-link-color;
				}
			}

			@include mouse-and-bp-up(md) {
				&:not(.icon-spin) {
					@include state("li.selected > .item-container") {
						color: $collection-tree-active-icon-color;
					}
				}

				// Rivisit: dnd styling
				@include state(".item-container.dnd-target", "li.selected .item-container.dnd-target") {
					color: $collection-tree-dnd-target-link-color;
				}
			}
		}

		> .icon {
			flex: 0 0 auto;
			margin-right: $space-xs;

			&.touch {
				margin-right: $space-md;
			}
		}

		> a {
			flex: 1 1 auto;
			color: $collection-tree-link-color;
			position: relative;
			@include text-truncate;

			@include state("li.selected > .item-container") {
				@include touch-or-bp-down(sm) {
					color: $touch-collection-tree-active-link-color;
				}

				@include mouse-and-bp-up(md) {
					color: $collection-tree-active-link-color;
				}
			}

			// Rivisit: dnd styling
			@include state(".item-container.dnd-target", "li.selected .item-container.dnd-target") {
				@include mouse-and-bp-up(md) {
					color: $collection-tree-dnd-target-icon-color;
				}
			}
		}

		.icon-spin {
			margin-right: 0;
			margin-left: $space-xs;
			color: $icon-color; // Reset
		}

		.btn-icon-plus {
			margin-right: -$space-min - $input-border-width;
			visibility: hidden;

			@include state(".item-container:hover") {
				visibility: visible;
			}
		}

		.dropdown-wrapper {
			@include touch-or-bp-down(sm) {
				margin-left: $space-xs;
				margin-right: -$space-min;
			}

			@include mouse-and-bp-up(md) {
				margin-left: $space-xs;
				margin-right: -$space-min - $input-border-width;
			}
		}

		.dropdown-toggle {
			display: block;

			@include touch-or-bp-down(sm) {
				@include state(".dropdown-wrapper.show .dropdown-toggle") {
					@include state("li.selected .item-container") {
						background-color: $body-bg;

						.icon {
							color: $touch-collection-tree-active-link-bg;
						}
					}
				}
			}

			@include mouse-and-bp-up(md) {
				visibility: hidden;

				@include state(".item-container:hover") {
					visibility: visible;
				}

				@include state(".dropdown-wrapper.show .dropdown-toggle") {
					visibility: visible;
				}
			}
		}
	}

	@include mouse-and-bp-up(md) {
		@for $i from 1 through $collection-tree-max-levels {
			$sel: if($i == 1, "ul", selector-nest($sel, "ul"));

			#{$sel} {
				.item-container {
					padding-left:
						$collection-tree-padding-left
							+ $collection-tree-indent
							* ($i - 1);
				}
			}
		}
	}

	.level-root {
		@include touch-or-bp-down(sm) {
			flex: 1 1 0;
			height: 100%;
			transform: translate3d(-25%, 0, 0);
			transition: transform $nav-transition;

			&.active {
				transform: translate3d(0, 0, 0);

				.scroll-container {
					overflow: scroll;
					-webkit-overflow-scrolling: touch; // Momentum scrolling
				}
			}

			// Always translate root level on phones
			.view-item-list-active & {
				@include bp-down(xs) {
					transform: translate3d(-25%, 0, 0);
				}
			}

			.scroll-container {
				overflow: hidden; // Prevent scrolling of inactive levels
				height: 100%;
			}
		}
	}

	.level {
		z-index: $z-index-level;
		transition: transform $nav-transition;

		.level {
			@include touch-or-bp-down(sm) {
				position: absolute;
				left: 0;
				top: 0;
				width: 100%;
				height: 100%;
				background: $sidebar-bg;
				transform: translate3d(100%, 0, 0);

				.nav {
					height: 100%;
					-webkit-overflow-scrolling: touch;
					overflow: scroll; // Do not set on positioned elements (horizontal overflow)
				}
			}

			@include mouse-and-bp-up(md) {
				display: none;
			}
		}

		.level-2 {
			@include touch-or-bp-down(sm) {
				transform: translate3d(125%, 0, 0);
			}
		}
	}

	.open,
	.selected {
		> .level {
			@include touch-or-bp-down(sm) {
				transform: translate3d(25%, 0, 0);
				z-index: $z-index-level-active;

				&.has-open {
					transform: translate3d(0, 0, 0);

					.nav {
						overflow: hidden; // Prevent scrolling of inactive levels
					}
				}
			}
		}

		// Do not translate last level on tablets and in touch mode
		.level-last {
			&.has-open {
				@include touch-or-bp-only(sm) {
					transform: translate3d(25%, 0, 0);
				}
			}
		}
	}

	.open {
		@include mouse-and-bp-up(md) {
			> .level {
				display: block;
			}
		}
	}
}

//
// Collection tree
// --------------------------------------------------

.collection-tree {
	height: 100%;

	@include touch-or-bp-down(sm) {
		display: flex;
		flex-direction: column;
	}

	@include mouse-and-bp-up(md) {
		padding: $collection-tree-padding-vertical 0;
		overflow: auto;
	}

	h4 {
		color: $collection-tree-headings-color;
		margin: 0;
		padding: 0 $collection-tree-padding-horizontal;

		@include touch-or-bp-down(sm) {
			padding: 0 $collection-tree-padding-horizontal-touch;
		}
	}

	ul {
		li {
			cursor: pointer;

			a {
				flex: 1 1 auto;
				color: $collection-tree-link-color;
				position: relative;
				@include css-truncate;
			}

			&:first-child {
				> .item-container {
					&:before {
						content: none;
					}
				}
			}
		}

		.item-container {
			outline: none;
			display: flex;
			align-items: center;
			position: relative;

			@include touch-or-bp-down(sm) {
				padding: 0 $default-padding-horizontal-touch;

				&::before {
					content: "";
					position: absolute;
					height: 1px;
					top: 0;
					left: $default-padding-horizontal-touch;
					right: $default-padding-horizontal-touch;
					background: $touch-collection-tree-border;
				}
			}

			@include mouse-and-bp-up(md) {
				padding-right: $default-padding-horizontal;
			}

			.keyboard & { // Heads up: 2 referencing parent selectors
				@include mouse-and-bp-up(md) {

					&:focus {
						position: relative;
						outline: 2px solid $collection-tree-focus-color;
						outline-offset: -3px;
					}
				}
			}
		}

		.selected {
			> .item-container {
				@include touch-or-bp-down(sm) {
					background: $touch-collection-tree-active-link-bg;

					&::before {
						content: none;
					}

					.icon.touch {
						color: $touch-collection-tree-active-link-color;
					}

					> a {
						color: $touch-collection-tree-active-link-color;
					}
				}

				@include mouse-and-bp-up(md) {
					background: $collection-tree-active-link-bg;

					.icon {
						color: $collection-tree-active-icon-color;
					}

					> a {
						color: $collection-tree-active-link-color;
					}
				}
			}
		}
	}

	@include mouse-and-bp-up(md) {
		@for $i from 1 through $collection-tree-max-levels {
			$sel: if($i == 1, "ul", selector-nest($sel, "ul"));

			#{$sel} {
				.item-container {
					padding-left:
						$collection-tree-padding-horizontal
							+ $collection-tree-indent
							* ($i - 1);
				}
			}
		}
	}

	.icon {
		flex: 0 0 auto;
		margin-right: $space-xs;

		&.touch {
			margin-right: $space-md;
		}
	}

	.level-root {
		@include touch-or-bp-down(sm) {
			flex: 1 1 0;
			height: 100%;
			transform: translate3d(-25%, 0, 0);
			transition: transform $nav-transition;

			&.active {
				transform: translate3d(0, 0, 0);

				.scroll-container {
					overflow: scroll;
					-webkit-overflow-scrolling: touch; // Momentum scrolling
				}
			}

			// Always translate root level on phones
			.view-item-list-active & {
				@include bp-down(xs) {
					transform: translate3d(-25%, 0, 0);
				}
			}

			.scroll-container {
				overflow: hidden; // Prevent scrolling of inactive levels
				height: 100%;
			}
		}
	}

	.level {
		z-index: $z-index-level;
		transition: transform $nav-transition;

		.level {
			@include touch-or-bp-down(sm) {
				position: absolute;
				left: 0;
				top: 0;
				width: 100%;
				height: 100%;
				background: $sidebar-bg;
				transform: translate3d(100%, 0, 0);

				.nav {
					height: 100%;
					-webkit-overflow-scrolling: touch;
					overflow: scroll; // Do not set on positioned elements (horizontal overflow)
				}
			}

			@include mouse-and-bp-up(md) {
				display: none;
			}
		}

		.level-2 {
			@include touch-or-bp-down(sm) {
				transform: translate3d(125%, 0, 0);
			}
		}
	}

	.open,
	.selected {
		> .level {
			@include touch-or-bp-down(sm) {
				transform: translate3d(25%, 0, 0);

				&.has-open {
					transform: translate3d(0, 0, 0);

					.nav {
						overflow: hidden; // Prevent scrolling of inactive levels
					}
				}
			}
		}

		// Do not translate last level on tablets
		.level-last {
			&.has-open {
				@include bp-only(sm) {
					transform: translate3d(25%, 0, 0);
				}
			}
		}
	}

	.open {
		@include mouse-and-bp-up(md) {
			> .level {
				display: block;
			}

			> .item-container {
				.twisty {
					&::after {
						transform: rotate(90deg);
					}
				}
			}
		}
	}
}

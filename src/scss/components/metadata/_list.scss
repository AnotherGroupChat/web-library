//
// Metadata list
// --------------------------------------------------

.metadata-list {
	margin: $metadata-list-margin;
	margin-top: 23px - 12px;

	@include bp-only(md) {
		margin-top: -3px;
	}

	.metadata {
		display: flex;
		align-items: flex-start;

		@include touch-or-bp-down(sm) {
			padding: 0 $default-padding-x-touch;
		}

		@include mouse-and-bp-up(md) {
			padding: 0 $default-padding-x;
		}

		@include bp-only(md) {
			padding-right: ($metadata-list-gutter + 1px);
		}
	}

	.key,
	.value {
		min-height: $metadata-list-line-height;
		overflow: visible;
		min-width: 0; // Fix truncation
		display: flex;

		@include bp-only(sm) {
			min-height: $metadata-list-line-height-sm;
		}
	}

	.key {
		color: $key-color;
		margin-top: $space-xs;
		flex: 0 0 $metadata-list-offset;
		margin-top: 0;
		align-items: center;

		@include touch-or-bp-down(sm) {
			padding-right: $metadata-list-gutter-mobile / 2;
		}

		@include mouse-and-bp-up(md) {
			padding-right: $metadata-list-gutter / 2;
			justify-content: flex-end;
		}

		a {
			color: inherit;
			text-decoration: none;

			&[href]:hover {
				color: $link-color;
			}
		}
	}

	label {
		@include text-truncate;
		line-height: normal; // Flex alignment is more stable

		&[for="url"] {
			overflow: inherit;
			text-overflow: inherit;
			white-space: inherit;
		}
	}

	.value {
		flex: 0 0 calc(100% - #{$metadata-list-offset});

		@include touch-or-bp-down(sm) {
			padding-left: $metadata-list-gutter-mobile / 2;
		}

		@include mouse-and-bp-up(md) {
			display: flex;
			align-items: center;
			padding-left: $metadata-list-gutter / 2;
		}
	}

	.empty {
		.editable-content {
			&:before {
				content: "\00a0";
			}
		}
	}

	&:not(.editing) {
		.empty {
			display: none;
		}
	}

	// Edit mode
	&.editing {
		@include touch-or-bp-down(sm) {
			.metadata {
				position: relative;
				background-color: $input-bg;
				padding-top: $input-border-width;

				&::before,
				&::after {
					position: absolute;
					left: $default-padding-x-touch;
					right: 0;
					top: 0;
					height: $input-border-width;
					background: $separator-color;
					z-index: 1;
				}

				&::before {
					content: "";
				}

				&:first-child {
					&::before {
						left: 0;
					}
				}

				&:last-child {
					padding-top: 0;
					padding-bottom: $input-border-width;

					&::after {
						content: "";
						left: 0;
						top: auto;
						bottom: 0;
					}
				}

				// Editable focus state
				&.editing {
					z-index: 2;

					&::before,
					&::after {
						content: "";
						position: absolute;
						left: 0;
						right: 0;
						height: $outline-width;
						background-color: $focus-color;
					}

					&::before {
						bottom: calc(100% - 1px);
					}

					&::after {
						top: calc(100% - 1px);
					}
				}
			}

			.key,
			.value {
				min-height: $line-height-large-touch;
			}
		}

		// Textarea fields
		.extra {
			@include touch-or-bp-down(sm) {
				flex-direction: column;
				align-items: normal;
			}

			.key {
				@include touch-or-bp-down(sm) {
					flex: 1 1 auto;
					padding-right: 0;
				}
			}

			label {
				@include touch-or-bp-down(sm) {
					flex: 1 1 auto;
				}
			}

			.value {
				@include touch-or-bp-down(sm) {
					padding-left: 0;
					padding-bottom: 7px;
					margin-top: -6px;
				}
			}
		}
	}

	@include mouse-and-bp-up(md) {
		.editable {
			line-height: normal;

			.editable-content {
				padding: 2px;
				border: 1px solid transparent;
				width: calc(100% + 6px);
				margin: -3px;
				border-radius: 3px;
				cursor: pointer;
			}

			&:hover {
				.editable-content {
					background-color: $editable-hover-bg;
					border-color: $editable-hover-bg;
				}
			}

			&.textarea {
				&.editing {
					margin-top: 2px; // Compensate missing padding on editable-control
					margin-bottom: 2px; // …
				}

				.editable-content {
					margin-top: -1px; // Align vertically with label
					margin-bottom: -1px; // …
				}

				.editable-control {
					margin-top: -3px; // Align vertically with label
					margin-bottom: -3px; // …
				}
			}
		}
	}

	// Creators field
	.creators-entry {
		.value {
			> *:not(:first-child) {
				margin-left: 2px;
			}

			> *:not(:last-child) {
				margin-right: 2px;
			}

			.editable {
				min-width: $space-lg;

				&:first-child {
					flex: 0 1 auto;

					&.editing {
						flex: 1 1 auto;
					}
				}

				&:last-of-type {
					margin-right: auto;
				}
			}

			.btn {
				padding: 0;
				border: none;
				width: $space-md;
				height: $space-md;
				flex: 0 0 auto;
				display: none;

				@include mouse-and-bp-up(md) {
					display: block;
				}

				&:focus {
					.keyboard & {
						box-shadow: none;
						outline: $outline-width solid $focus-color;
					}
				}

				.icon {
					display: none;
				}
			}

			.btn:nth-last-child(3) {
				width: 17px;
				margin-left: $space-min + $input-btn-focus-width + $input-border-width;
			}

			.btn:nth-last-child(2) {
				background: image-url("icons/minus-circle.svg") no-repeat center center;
			}

			.btn:last-child {
				background: image-url("icons/plus-circle.svg") no-repeat center center;
			}
		}

		&.creators-twoslot {
			.value {
				.editable:first-child {
					display: flex;

					.input-group {
						flex: 1 1 auto;
					}

					&::after {
						content: ",";
						flex: 0 0 auto;
					}
				}
			}

			.btn:nth-last-child(3) {
				background: image-url("icons/input-single.svg") no-repeat center center;
			}
		}

		&.creators-oneslot {
			.btn:nth-last-child(3) {
				background: image-url("icons/input-dual.svg") no-repeat center center;
			}
		}
	}

	.extra {
		label {
			line-height: $line-height-base;
		}
	}
}

//
// Metadata list
// --------------------------------------------------

.metadata-list {
	margin: $metadata-list-margin;
	margin-top: 23px - 12px;

	@include bp-only(md) {
		margin-top: -3px;
	}

	&.editing {
		@include bp-only(sm) {
			margin-left: $metadata-list-margin-x;
			margin-right: $metadata-list-margin-x;
		}

		@include touch-and-bp-up(md) {
			margin-left: $metadata-list-margin-x;
			margin-right: $metadata-list-margin-x;
		}
	}

	.metadata {
		align-items: flex-start;

		@include bp-down(xs) {
			margin-bottom: $font-size-mobile / 2;
		}

		@include touch-or-bp-down(xs) {
			padding-left: $default-padding-x-touch;
			padding-right: $default-padding-x-touch;
		}

		@include bp-up(sm) {
			display: flex;
		}

		@include mouse-and-bp-up(sm) {
			padding-left: $default-padding-x-touch;
			padding-right: $default-padding-x-touch;
		}

		@include mouse-and-bp-up(md) {
			padding-left: $default-padding-x;
			padding-right: $default-padding-x;
		}

		@include bp-only(md) {
			padding-right: ($metadata-list-gutter + 1px);
		}

		@include touch-or-bp-down(md) {
			&.empty {
				@include state(".metadata-list:not(.editing)") {
					display: none;
				}
			}
		}

		// Edit mode
		@include state(".metadata-list.editing") {
			display: flex;
			align-items: flex-start;
			position: relative;
			background-color: $input-bg;
			padding-top: $input-border-width;
			margin-bottom: 0;

			&::before,
			&::after {
				position: absolute;
				left: $default-padding-x-touch;
				right: 0;
				top: 0;
				height: $input-border-width;
				background: $separator-color;
				z-index: 1;
			}

			&::before {
				content: "";
			}

			&:first-child {
				&::before {
					left: 0;
				}
			}

			&:last-child {
				padding-bottom: $input-border-width;

				&::after {
					content: "";
					left: 0;
					top: auto;
					bottom: 0;
				}
			}

			// Editable focus state
			&.editing {
				z-index: 2;

				&::before,
				&::after {
					content: "";
					position: absolute;
					left: 0;
					right: 0;
					height: $outline-width;
					background-color: $focus-color;
				}

				&::before {
					bottom: calc(100% - 1px);
				}

				&::after {
					top: calc(100% - 1px);
				}
			}
		}
	}

	.key,
	.value {
		min-height: $metadata-list-line-height;
		overflow: visible;
		min-width: 0; // Fix truncation
		display: flex;

		@include bp-only(sm) {
			min-height: $metadata-list-line-height-sm;
		}

		// Edit mode
		@include state(".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				min-height: $line-height-large-touch;
			}
		}
	}

	.key {
		color: $key-color;
		margin-top: $space-xs;
		flex: 0 0 $metadata-list-offset;
		margin-top: 0;
		align-items: center;

		@include bp-up(sm) {
			justify-content: flex-end;
			padding-right: $metadata-list-gutter-mobile / 2;
		}

		@include mouse-and-bp-up(md) {
			padding-right: $metadata-list-gutter / 2;
		}

		// Edit mode
		@include state(".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				justify-content: flex-start;
				padding-right: $metadata-list-gutter-mobile / 2;
			}
		}

		a {
			color: inherit;
			text-decoration: none;

			&[href]:hover {
				color: $link-color;
			}
		}
	}

	label {
		@include text-truncate;
		line-height: normal; // Flex alignment is more stable

		&[for="url"] {
			overflow: inherit;
			text-overflow: inherit;
			white-space: inherit;
		}
	}

	.value {
		flex: 1 1 0;

		@include bp-up(sm) {
			display: flex;
			align-items: center;
			padding-left: $metadata-list-gutter-mobile / 2;
		}

		@include mouse-and-bp-up(md) {
			padding-left: $metadata-list-gutter / 2;
		}

		// Edit mode
		@include state(".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				padding-left: $metadata-list-gutter-mobile / 2;
			}
		}
	}

	@include mouse-and-bp-up(md) {
		.editable {
			line-height: normal;

			.editable-content {
				padding: $editable-padding;
				border: $input-border-width solid transparent;
				width: calc(100% + #{2 * $editable-border-width});
				margin: -$editable-border-width;
				border-radius: $editable-border-radius;
				cursor: pointer;

				@include state(".empty .editable") {
					&:before {
						content: "\00a0";
					}
				}
			}

			&:hover {
				.editable-content {
					background-color: $editable-hover-bg;
					border-color: $editable-hover-bg;
				}
			}

			&.textarea {
				&.editing {
					margin-top: 2px; // Compensate missing padding on editable-control
					margin-bottom: 2px; // …
				}

				.editable-content {
					padding: 0 $editable-padding;
					margin-top: 1px; // Align vertically with label
					margin-bottom: 1px; // …
				}

				.editable-control {
					margin-top: -3px; // Align vertically with label
					margin-bottom: -3px; // …
				}
			}
		}
	}

	// Title field
	.title {
		@include touch-or-bp-down(sm) {
			display: none;

			@include state(".metadata-list.editing") {
				display: flex;
				margin-bottom: $form-section-margin;
				min-height: $line-height-large-touch + 2 * $border-width;
				padding-bottom: $border-width;

				&::after {
					content: "";
					left: 0;
					top: auto;
					bottom: 0;
				}
			}
		}
	}

	// Textarea fields
	.extra {
		// Edit mode
		@include state(".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				flex-direction: column;
				align-items: normal;
			}
		}

		.key {
			@include state(".metadata-list.editing") {
				@include touch-or-bp-down(sm) {
					flex: 1 1 auto;
					padding-right: 0;
				}
			}
		}

		label {
			line-height: $line-height-base;

			// Edit mode
			@include state(".metadata-list.editing") {
				@include touch-or-bp-down(sm) {
					flex: 1 1 auto;
				}
			}
		}

		.value {
			// Edit mode
			@include state(".metadata-list.editing") {
				@include touch-or-bp-down(sm) {
					flex: 1 1 auto;
					padding-left: 0;
					padding-bottom: 7px;
					margin-top: -6px;
				}
			}
		}
	}
}

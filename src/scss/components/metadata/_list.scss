//
// Metadata list
// --------------------------------------------------

.metadata-list {
	margin: $metadata-list-margin;
	margin-top: 23px - 12px;

	@include bp-only(md) {
		margin-top: -3px;
	}

	&.editing {
		margin-top: $form-section-margin;
		margin-bottom: $form-section-margin;

		@include bp-only(sm) {
			margin-left: $metadata-list-margin-x-touch;
			margin-right: $metadata-list-margin-x-touch;
		}

		@include touch-and-bp-up(md) {
			margin-left: $metadata-list-margin-x-touch;
			margin-right: $metadata-list-margin-x-touch;
		}

		@include variant(".modal .metadata-list") {
			html:not(.specifity) & {
				margin: ($form-section-margin - $modal-inner-padding)
					(-$modal-inner-padding);
			}
		}
	}

	.metadata {
		align-items: flex-start;

		@include bp-down(xs) {
			margin-bottom: $font-size-mobile / 2;
		}

		@include touch-or-bp-down(xs) {
			padding-left: $default-padding-x-touch;
			padding-right: $default-padding-x-touch;
		}

		@include bp-up(sm) {
			display: flex;
		}

		@include mouse-and-bp-up(sm) {
			padding-left: $default-padding-x-touch;
			padding-right: $default-padding-x-touch;
		}

		@include mouse-and-bp-up(md) {
			padding-left: $default-padding-x;
			padding-right: $default-padding-x;
		}

		@include bp-only(md) {
			padding-right: ($metadata-list-gutter + 1px);
		}

		&.empty {
			@include touch-or-bp-down(md) {
				@include state(".metadata-list:not(.editing)") {
					display: none;
				}
			}
		}

		&.dnd-source {
			opacity: 0;

			@include touch-or-bp-down(sm) {
				& + .metadata {
					padding-top: 0;
					margin-top: $input-border-width;

					&::before {
						content: none;
					}
				}
			}
		}

		// Edit mode
		@include state(".metadata-list.editing") {
			display: flex;
			align-items: flex-start;
			position: relative;
			background-color: $input-bg;
			padding-top: $input-border-width;
			margin-bottom: 0;

			&::before,
			&::after {
				position: absolute;
				left: $default-padding-x-touch;
				right: 0;
				top: 0;
				height: $input-border-width;
				background: $input-border-color;
				z-index: 1;
			}

			&::before {
				content: "";
			}

			&:first-child {
				@include bp-up(sm) {
					padding-top: 0;
					border-top-left-radius: $input-border-radius;
					border-top-right-radius: $input-border-radius;
				}

				&::before {
					left: 0;

					@include bp-up(sm) {
						content: none;
					}
				}
			}

			&:last-child {
				padding-bottom: $input-border-width;

				@include bp-up(sm) {
					padding-bottom: 0;
					border-bottom-left-radius: $input-border-radius;
					border-bottom-right-radius: $input-border-radius;
				}

				&::after {
					content: "";
					left: 0;
					top: auto;
					bottom: 0;

					@include bp-up(sm) {
						content: none;
					}
				}
			}

			// Editable focus state
			&:focus-within:not(.creators-entry) {
				.keyboard & {
					z-index: 2;

					&::before,
					&::after {
						content: "";
						position: absolute;
						left: 0;
						right: 0;
						height: $outline-width;
						background-color: $focus-color;
					}

					&::before {
						top: auto;
						bottom: calc(100% - #{$input-border-width});
					}

					&::after {
						top: 100%;
					}
				}
			}
		}
	}

	.touch-separated {
		@include state(".metadata-list.editing") {
			margin-bottom: $form-section-margin;

			@include bp-down(xs) {
				padding-bottom: $border-width;
			}

			@include touch-or-bp-up(sm) {
				border-bottom-left-radius: $input-btn-border-radius;
				border-bottom-right-radius: $input-btn-border-radius;
			}

			&::after {
				@include bp-down(xs) {
					content: "";
					left: 0;
					top: auto;
					bottom: 0;
				}
			}

			& + .metadata {
				@include bp-down(xs) {
					padding-bottom: $border-width;
				}

				@include touch-and-bp-up(sm) {
					padding-top: 0;
					border-top-left-radius: $input-btn-border-radius;
					border-top-right-radius: $input-btn-border-radius;
				}

				&::before {
					@include bp-down(xs) {
						left: 0;
					}

					@include touch-and-bp-up(sm) {
						content: none;
					}
				}

				&:focus-within {
					&::before {
						@include touch-keyboard-or-bp-down(sm) {
							content: "";
						}
					}
				}
			}
		}
	}

	.has-btn,
	.has-btn-icon {
		@include touch-or-bp-down(sm) {
			padding-left: 0; // Keep vertical paddings
			padding-right: 0;

			.btn {
				padding: 0 $default-padding-x-touch;
				border: 0;
				width: 100%;
				text-align: left;
				color: $link-color;
				line-height: $line-height-large-touch;

				&:focus {
					outline: none;
				}

				&.btn-delete {
					color: $red;
				}
			}
		}

		&::before {
			@include touch-keyboard-or-bp-down(sm) {
				@include state(".touch-separated:focus-within") {
					left: 0;
				}
			}
		}
	}

	.has-btn {
		&::before {
			@include touch-or-bp-down(sm) {
				left: $default-padding-x-touch;
			}
		}

		.btn {
			background: transparent;
		}
	}

	.has-btn-icon {
		&::before {
			@include touch-or-bp-down(sm) {
				left: 2 * $default-padding-x-touch + $space-lg;
			}
		}

		.btn-icon {
			@include touch-or-bp-down(sm) {
				.icon {
					vertical-align: top;
					margin-top: ($line-height-large-touch - $space-lg) / 2;
					margin-right: $default-padding-x-touch;
				}
			}
		}
	}

	.key,
	.value {
		min-height: $metadata-list-line-height;
		overflow: visible;
		min-width: 0; // Fix truncation
		display: flex;

		@include bp-only(sm) {
			min-height: $metadata-list-line-height-sm;
		}

		// Edit mode
		@include state(".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				min-height: $line-height-large-touch;
			}
		}
	}

	.key {
		color: $key-color;
		margin-top: $space-xs;
		flex: 0 0 $metadata-list-offset;
		margin-top: 0;
		align-items: center;

		@include bp-up(sm) {
			justify-content: flex-end;
			padding-right: $metadata-list-gutter-mobile / 2;
		}

		@include mouse-and-bp-up(md) {
			padding-right: $metadata-list-gutter / 2;
		}

		// Edit mode
		@include state(".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				justify-content: flex-start;
				padding-right: $metadata-list-gutter-mobile / 2;
			}
		}

		a {
			color: inherit;
			text-decoration: none;

			&[href]:hover {
				color: $link-color;
			}
		}
	}

	label {
		@include text-truncate;
		line-height: normal; // Flex alignment is more stable

		&[for="url"] {
			overflow: inherit;
			text-overflow: inherit;
			white-space: inherit;
		}
	}

	.form-control {
		&:not(textarea) {
			line-height: normal;
		}

		&:focus {
			outline: none;
		}
	}

	.native-select-wrap {
		.form-control {
			background-color: transparent;
		}
	}

	.value {
		flex: 1 1 0;

		@include bp-up(sm) {
			display: flex;
			align-items: center;
			padding-left: $metadata-list-gutter-mobile / 2;
		}

		@include mouse-and-bp-up(md) {
			padding-left: $metadata-list-gutter / 2;
		}

		// Edit mode
		@include state(".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				padding-left: $metadata-list-gutter-mobile / 2;
			}
		}
	}

	@include mouse-and-bp-up(md) {
		.editable {
			line-height: normal;

			.editable-content {
				padding: $editable-padding;
				border: $input-border-width solid transparent;
				width: calc(100% + #{2 * $editable-border-width});
				margin: -$editable-border-width;
				border-radius: $editable-border-radius;
				cursor: pointer;

				@include state(".empty .editable") {
					&:before {
						content: "\00a0";
					}
				}
			}

			&:hover {
				.editable-content {
					background-color: $editable-hover-bg; // Use transparency so you can see through the comma between last and first name
				}
			}

			&.textarea {
				&.editing {
					margin-top: 2px; // Compensate missing padding on editable-control
					margin-bottom: 2px; // …
				}

				.editable-content {
					padding: 0 $editable-padding;
					margin-top: 1px; // Align vertically with label
					margin-bottom: 1px; // …
				}

				.editable-control {
					margin-top: -3px; // Align vertically with label
					margin-bottom: -3px; // …
				}
			}
		}
	}

	// Textarea fields
	.title,
	.extra {
		// Edit mode
		@include state(".metadata-list.editing") {
			@include touch-or-bp-down(sm) {
				flex-direction: column;
				align-items: normal;
			}

			&:focus-within {
				.keyboard & {
					&::after {
						top: calc(100% - #{$outline-width});
					}
				}
			}
		}

		.key {
			@include state(".metadata-list.editing") {
				@include touch-or-bp-down(sm) {
					flex: 1 1 auto;
					padding-right: 0;
				}
			}
		}

		label {
			line-height: $line-height-base;

			// Edit mode
			@include state(".metadata-list.editing") {
				@include touch-or-bp-down(sm) {
					flex: 1 1 auto;
				}
			}
		}

		.value {
			// Edit mode
			@include state(".metadata-list.editing") {
				@include touch-or-bp-down(sm) {
					flex: 1 1 auto;
					padding-left: 0;
					padding-bottom: 7px;
					margin-top: -6px;
				}
			}
		}
	}
}
